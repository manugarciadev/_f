import React, { useState } from "react";
import axios from 'axios';
import { Box, Button, Typography, useTheme, Card, CardContent, Dialog,
  DialogTitle,
  DialogContent,
  DialogActions } from "@mui/material";
import { tokens } from "../../theme";
import { mockTransactions } from "../../data/mockData";
import DownloadOutlinedIcon from "@mui/icons-material/DownloadOutlined";
import PointOfSaleIcon from "@mui/icons-material/PointOfSale";
import PersonAddIcon from "@mui/icons-material/PersonAdd";
import Header from "../../components/Header";
import TreeView from "@mui/lab/TreeView";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import TreeItem from "@mui/lab/TreeItem";
import { Stepper, Step, StepLabel, IconButton } from '@mui/material';
import { Person, Email, Phone, Done } from '@mui/icons-material';
import TextField from '@mui/material/TextField';
import Checkbox from "@mui/material/Checkbox";
import Divider from "@mui/material/Divider";
import Modal from "@mui/material/Modal";
import AddIcon from "@mui/icons-material/Add";
import { styled } from '@mui/material/styles';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import Switch from '@mui/material/Switch';
import Stack from '@mui/material/Stack';
import CloseIcon from '@mui/icons-material/Close';
import FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';
import { MapContainer, TileLayer, Polygon } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { statesData } from './data';
import { Container, Grid, Paper } from '@mui/material';
import success from "./success.png";
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';
import DirectionsBusIcon from '@mui/icons-material/DirectionsBus';
import icon from "./img/icon.png";
import './product_activity_form.css';
import Autocomplete from '@mui/material/Autocomplete';
import { Select, MenuItem, FormControl, InputLabel, List, ListItem, ListItemText, ListItemSecondaryAction, Avatar } from '@mui/material';
import { Delete } from '@mui/icons-material';
import DeleteIcon from '@mui/icons-material/Delete';
import CheckIcon from '@mui/icons-material/Check';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import PersonIcon from '@mui/icons-material/Person';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import { v4 as uuidv4 } from 'uuid';
import Accordion from '@mui/material/Accordion';
import AccordionDetails from '@mui/material/AccordionDetails';
import AccordionSummary from '@mui/material/AccordionSummary';


const rates = [
  { id: 1, title: 'Rate 1' },
  { id: 2, title: 'Rate 2' },
  { id: 3, title: 'Rate 3' },
];

const steps = [
  { label: 'Basic Information', icon: <Person /> },
  { label: 'Media & Description', icon: <Email /> },
  { label: 'Inclusions & Exclusions', icon: <Phone /> },
  { label: 'Seasons', icon: <Phone /> },
  { label: 'Rooms / Pricing', icon: <Phone /> },
  { label: 'Finished', icon: <Done /> },
];

const top100Films = [
  { label: 'Hotel' },
  { label: 'Guest House' },
  { label: 'Air Bnb' },
  { label: 'Pension'}];


// >>> selectedOption


const ageRanges = [
  { id: 1, title: 'Child (0-18)', status: 'Active 🟢' },
  { id: 2, title: 'Youth(19-35)', status: 'Active 🟢' },
  { id: 3, title: 'Adult(36-50)', status: 'Active 🟢' },

];

const initialRoom = {
  codigo: '',
  titulo: '',
  descricao: '',
  tipoQuarto: '',
  temporadas: [],
};

const IOSSwitch = styled((props) => (
  <Switch focusVisibleClassName=".Mui-focusVisible" disableRipple {...props} />
))(({ theme }) => ({
  width: 42,
  height: 26,
  padding: 0,
  '& .MuiSwitch-switchBase': {
    padding: 0,
    margin: 2,
    transitionDuration: '300ms',
    '&.Mui-checked': {
      transform: 'translateX(16px)',
      color: '#fff',
      '& + .MuiSwitch-track': {
        backgroundColor: theme.palette.mode === 'dark' ? '#2ECA45' : '#65C466',
        opacity: 1,
        border: 0,
      },
      '&.Mui-disabled + .MuiSwitch-track': {
        opacity: 0.5,
      },
    },
    '&.Mui-focusVisible .MuiSwitch-thumb': {
      color: '#33cf4d',
      border: '6px solid #fff',
    },
    '&.Mui-disabled .MuiSwitch-thumb': {
      color:
        theme.palette.mode === 'light'
          ? theme.palette.grey[100]
          : theme.palette.grey[600],
    },
    '&.Mui-disabled + .MuiSwitch-track': {
      opacity: theme.palette.mode === 'light' ? 0.7 : 0.3,
    },
  },
  '& .MuiSwitch-thumb': {
    boxSizing: 'border-box',
    width: 22,
    height: 22,
  },
  '& .MuiSwitch-track': {
    borderRadius: 26 / 2,
    backgroundColor: theme.palette.mode === 'light' ? '#E9E9EA' : '#39393D',
    opacity: 1,
    transition: theme.transitions.create(['background-color'], {
      duration: 500,
    }),
  },
}));


const SelectableItems = ({ items }) => {
  const [selectedItems, setSelectedItems] = useState([]);

  const handleItemChange = (item) => {
    if (selectedItems.includes(item)) {
      setSelectedItems((prevSelected) =>
        prevSelected.filter((selectedItem) => selectedItem !== item)
      );
    } else {
      setSelectedItems((prevSelected) => [...prevSelected, item]);
    }
  };

  return (
    <div>
      {items.map((item) => (
        <div key={item}>
          <input
            type="checkbox"
            checked={selectedItems.includes(item)}
            onChange={() => handleItemChange(item)}
          />
          <label>{item}</label>
        </div>
      ))}
    </div>
  );
};



const ModalContent = ({ categories, themes }) => {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [selectedThemes, setSelectedThemes] = useState([]);

  const handleCategoryChange = (category) => {
    if (selectedCategories.includes(category)) {
      setSelectedCategories((prevSelected) =>
        prevSelected.filter((c) => c !== category)
      );
    } else {
      setSelectedCategories((prevSelected) => [...prevSelected, category]);
    }
  };

  const handleThemeChange = (theme) => {
    if (selectedThemes.includes(theme)) {
      setSelectedThemes((prevSelected) =>
        prevSelected.filter((t) => t !== theme)
      );
    } else {
      setSelectedThemes((prevSelected) => [...prevSelected, theme]);
    }
  };

  return (
    <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", width:"200px" }}>
      <Box sx={{ mb: 2 }}>
        <Typography variant="h6">Categories</Typography>
        {categories.map((category) => (
          <Box key={category} sx={{ display: "flex", alignItems: "center" }}>
            <Checkbox
              checked={selectedCategories.includes(category)}
              onChange={() => handleCategoryChange(category)}
            />
            <Typography>{category}</Typography>
          </Box>
        ))}
      </Box>
      <Divider sx={{ width: "100%" }} />
      <Box sx={{ mt: 2, mb: 2 }}>
        <Typography variant="h6">Themes</Typography>
        {themes.map((theme) => (
          <Box key={theme} sx={{ display: "flex", alignItems: "center" }}>
            <Checkbox
              checked={selectedThemes.includes(theme)}
              onChange={() => handleThemeChange(theme)}
            />
            <Typography>{theme}</Typography>
          </Box>
        ))}
      </Box>
      <Button
        variant="contained"
        color="primary"
        startIcon={<AddIcon />}
        sx={{ mt: 2 }}
      >
        Adicionar
      </Button>
    </Box>
  );
};



const center = [15.166214,-23.555734]; // 15.166214, -23.555734
const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4']; // Defina aqui os itens que deseja mostrar no dropdown



const Dashboard = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [activeStep, setActiveStep] = useState(0);
  const [open, setOpen] = useState(false);
  const [draggedImages, setDraggedImages] = useState([]);
  const [imageUrls, setImageUrls] = useState([
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
    'https://blog.portalpos.com.br/app/uploads/2021/08/cores.jpg',
  
  ]);
  
  const [containerHeight, setContainerHeight] = useState('200px');
  const [maxParticipants, setMaxParticipants] = useState(4);
  const [prices, setPrices] = useState({});
  const [image, setImage] = useState(null);
  const [roomImage, setRoomImage] = useState(null);
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [seasonTitle, setSeasonTitle] = useState('');
  const [title, setTitle] = useState('');
  const [pricePerHour, setPricePerHour] = useState('');
  const [pricePerDay, setPricePerDay] = useState('');
  const [seasons, setSeasons] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [roomData, setRoomData] = useState(initialRoom);
  const [roomIndex, setRoomIndex] = useState(null);
  const [openModal, setOpenModal] = useState(false);
  const [temporadaNome, setTemporadaNome] = useState('');
  const [temporadaPrecoHora, setTemporadaPrecoHora] = useState('');
  const [temporadaPrecoDia, setTemporadaPrecoDia] = useState('');
  const [knowBeforeYouGo, setKnowBeforeYouGo] = useState();
  const [knowBeforeYouGoDescription, setKnowBeforeYouGoDescription] = useState('');
  const [whatToBring, setWhatToBring] = useState('');
  const [cancelationPolicy, setCancelationPolicy] = useState();
  const [minIntegrantes, setMinIntegrantes] = useState('');
  const [maxIntegrantes, setMaxIntegrantes] = useState('');
  const [selectedItems, setSelectedItems] = useState([]);

  const [camposGerados, setCamposGerados] = useState({});
  const [generatedArray, setGeneratedArray] = useState([]);
  const [allRates, setAllRates] = useState(null);
  const ages = [22,33,18,7,30];
  const [anchorEl, setAnchorEl] = useState(null);
  const [languageMenuOpen, setLanguageMenuOpen] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [language, setLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
   // >>> Form fieling fields
   const [code, setCode] = useState('');
  
   const [day, setDay] = useState(0);
   const [hour, setHour] = useState(0);
   const [minute, setMinute] = useState(0);
   const [localization, setLocalization] = useState('');
   const [categoriesForTrip, setCategoriesForTrip] = useState(null);
   const [shortDescription, setShortDescription] = useState('');
   const [longDescription, setLongDescription] = useState('');
   const [video, setVideo] = useState(null);
   const [rates, setRates] = useState([]);
   const [inclusions, setInclusions] = useState();
   const [inclusionsDescription, setInclusionsDescription] = useState('');
   const [exclusions, setExclusions] = useState();
   const [exclusionsDescription, setExclusionsDescription] = useState('');
   const [languagesSelected, setLanguagesSelected] = useState();
   //const [price, setPrice] = useState();
  const [selectedTab, setSelectedTab] = useState('tab1'); 
  const [categories, setCategories] = useState([
    { title: 'Adult', startAge: 18, endAge: 99 },
    { title: 'Child', startAge: 3, endAge: 12 },
  ]);
  const [isChecked, setIsChecked] = useState({}); // Estado para rastrear os itens marcados
  const [seasonsTst, setSeasonsTst] = useState([
    {
      id: 1,
      startDate: "2023-03-21",
      endDate: "2023-06-20",
      seasonTitle: "Epoca Alta",
      pricePerHour: 0, // Adicione o preço por hora aqui
      pricePerDay: 0,  // Adicione o preço por dia aqui
      tiers: [],
    },
    {
      id: 2,
      startDate: "2023-03-21",
      endDate: "2023-06-20",
      seasonTitle: "Epoca Baixa",
      pricePerHour: 0, // Adicione o preço por hora aqui
      pricePerDay: 0,  // Adicione o preço por dia aqui
      tiers: [],
    },
 
    // Outras estações... handleOptionChange
  ]);

  const [selectedIndex, setSelectedIndex] = useState(0); // Inicialmente, selecione o índice 0
  const [selectedRoomIndex, setSelectedRoomIndex] = useState(0); // Inicialmente, selecione o índice 0
  const [checkedItems, setCheckedItems] = useState({}); // Estado para rastrear os itens marcadoss
  const [selectedOption, setSelectedOption] = useState(null);

  const selectedSeason = seasonsTst[selectedIndex];

  const selectedRoom = rooms[selectedRoomIndex];

  const handleChange = (event) => {
      setSelectedIndex(event.target.value);
  };

  const handleChangeRoomSelected = (event) => {
    setSelectedRoomIndex(event.target.value);
};
  
const toggleItem = (item) => {
  setIsChecked((prevState) => ({
    ...prevState,
    [item]: !prevState[item] || false,
  }));
};


const handleSubmit = async (e) => {
  e.preventDefault();

  const data = {
      code,
      title,
      day,
      hour,
      minute,
      localization,
      categories,
      themes,
      shortDescription,
      description: longDescription,
      image,
      video,
      // >>>
      inclusions,
      inclusionsDescription,
      // >>>
      exclusions,
      exclusionsDescription,
      // >>>
      languagesSelected,
      // >>>
      knowBeforeYouGo,
      knowBeforeYouGoDescription,
      // >>>
      whatToBring,
      cancelationPolicy,
      
      // ... other state variables ...
  };

  console.log(data);


  
  const backendURL = "http://localhost:8081/api/day-tour-activity";

  axios.post(backendURL, data)
    .then((response) => {
      // Handle success response from the backend if needed
      console.log("Cool");
    })
    .catch((error) => {
      // Handle error response from the backend if needed
      console.error(error);
    });
};



// >>> Handling Debug

const handleDebug = () => {
 
    console.log("Product Code ->",code);
    console.log("Product Title ->",title);
    console.log("Product Type ->",selectedOption);
    console.log("Product Hour ->",hour);
    console.log("Product Minute ->",minute);
    console.log("Product localization ->",localization);
    console.log("Product Categories ->",categories);
    console.log("Product Themes ->",themes);
    console.log("Product Short Description ->",shortDescription);
    console.log("Product Long Description ->",longDescription);
    console.log("Product Image ->",image);
    console.log("Product Video ->",video);
    console.log("Product Inclusions ->",inclusions);
    console.log("Product Inclusions Description ->",inclusionsDescription);
    console.log("Product Exclusions ->",exclusions);
    console.log("Product Exclusions Description ->",exclusionsDescription);
    console.log("Product Languages ->",languagesSelected);
    //console.log(price);
    console.log("Product Know Before You Go ->",knowBeforeYouGo);
    console.log("Product Know Before You Go Description ->",knowBeforeYouGoDescription);
    console.log("Product What to Bring ->",whatToBring);
    console.log("Product Cancellation Policy ->",cancelationPolicy);
    console.log("Rates ->",allRates);
    console.log("Rooms ->",rooms);
    
    


    }


  // >>> Setters for variables
  const handleCodeChange = (event) => {
    setCode(event.target.value);
  };


  const handleProductTitleChange = (event) => {
    setTitle(event.target.value);
  };

  const handleShortDescriptionChange = (event) => {
    setShortDescription(event.target.value);
  };

  const handleLongDescriptionChange = (event) => {
    setLongDescription(event.target.value);
  };

  const handleVideoChange = (event) => {
    setVideo(event.target.value);
  };

  const handleInclusionsDescriptionChange = (event) => {
    setInclusionsDescription(event.target.value);
  };

  const handleExclusionsDescriptionChange = (event) => {
    setExclusionsDescription(event.target.value);
  };

  const handleWhatToBringChange = (event) => {
    setWhatToBring(event.target.value);
  };

  const handleKnowBeforeYouGoDescriptionChange = (event) => {
    setKnowBeforeYouGoDescription(event.target.value);
  };

  const handleCancelationPolicyChange = (event) => {
    setCancelationPolicy(event.target.value);
  };


const handleAddItems = () => {
  const newSelectedItems = items.filter((item) => isChecked[item]);
  setSelectedItems(newSelectedItems);
  console.log(selectedItems);
};

const handleSeasonsPriceChange = (e, index, priceType) => {
  const newValue = e.target.value;

  // Faça uma cópia do array seasonsTst
  const updatedSeasons = [...seasonsTst];

  // Acesse a temporada específica pelo índice e atualize o preço correspondente
  if (priceType === 'pricePerHour') {
    updatedSeasons[index].pricePerHour = newValue;
  } else if (priceType === 'pricePerDay') {
    updatedSeasons[index].pricePerDay = newValue;
  }

  // Atualize o estado com as temporadas atualizadas
  setSeasonsTst(updatedSeasons);
};

const handleItemChange = (event) => {
  const selectedItem = event.target.value;
  setSelectedItems((prevSelectedItems) =>
    prevSelectedItems.includes(selectedItem)
      ? prevSelectedItems.filter((item) => item !== selectedItem)
      : [...prevSelectedItems, selectedItem]
  );
};



const handleCheckboxChange = (event, item) => {
  setCheckedItems((prevCheckedItems) => ({
    ...prevCheckedItems,
    [item]: event.target.checked,
  }));
};


  function countAgeCategories() {
    const counts = [];
    generatedArray.forEach(category => {
      counts.push({
        title: category.title,
        count: 0
      });
    });
  
    ages.forEach(age => {
      generatedArray.forEach(category => {
        if (age >= category.startAge && age <= category.endAge) {
          const categoryIndex = counts.findIndex(item => item.title === category.title);
          if (categoryIndex !== -1) {
            counts[categoryIndex].count++;
          }
        }
      });
    });
  
    //const ttp = calculateTotalPriceArray(counts);
    //console.log(ttp);
    return counts;
  }

  const handleSeasonPriceChange = (event, field) => {
    const updatedSeasons = [...seasons];
    updatedSeasons[selectedIndex][field] = parseFloat(event.target.value);
    setSeasons(updatedSeasons);
  };

  function calculateTotalPriceArray(counts) {
    let totalPrice = 0;
  
    counts.forEach(categoryCount => {
      const { title, count } = categoryCount;
      const category = generatedArray.find(cat => cat.title === title);
  
      if (category) {
        const field = category.fields.find(f => count >= f.from && count <= f.to);
  
        if (field) {
          totalPrice += field.price * count;
        }
      }
    });
  
    return totalPrice;
  }




// >>>> top100Films

  const handleAccordionClick = () => {
    // Inverter o estado de seleção de todos os itens ao clicar no Accordion
    const newCheckedState = {};
    items.forEach((item) => {
      newCheckedState[item] = !isChecked[item] || false;
    });
    setIsChecked(newCheckedState);
  };

  const handleDebugSeason = () => {
   console.log(rooms);
   console.log(selectedRoom.id);
  };

  const addSeasonsToRoomById = (roomId) => {
    // Encontre o quarto com base no ID
    const roomToUpdate = rooms.find(room => room.id === roomId);
   const variableName = 'pricePerSeason';
    // Verifique se o quarto foi encontrado
    if (!roomToUpdate) {
      console.error('Quarto não encontrado');
   // Retorna o array de quartos original
    }
  
    // Adicione as estações (seasons) ao quarto sob o nome desejado (seasonName)
    roomToUpdate[variableName] = seasonsTst;
  
    // Clone o array de quartos e substitua o quarto atualizado
    const updatedRooms = rooms.map(room => (room.id === roomId ? roomToUpdate : room));
  
    return updatedRooms;
  };

  const addPricePersonToRoomById = (roomId) => {
    // Encontre o quarto com base no ID
    const roomToUpdate = rooms.find(room => room.id === roomId);
   const variableName = 'pricePerPerson';
    // Verifique se o quarto foi encontrado
    if (!roomToUpdate) {
      console.error('Quarto não encontrado');
   // Retorna o array de quartos original
    }
  
    // Adicione as estações (seasons) ao quarto sob o nome desejado (seasonName)
    roomToUpdate[variableName] = generatedArray;
  
    // Clone o array de quartos e substitua o quarto atualizado
    const updatedRooms = rooms.map(room => (room.id === roomId ? roomToUpdate : room));
  
    return updatedRooms;
  };

  const handlePriceChange = (seasonId, tierIndex, event) => {
    const newSeasonsTst = seasonsTst.map((season) => {
      if (season.id === seasonId) {
        const newTiers = [...season.tiers];
        newTiers[tierIndex].price = event.target.value;
        return { ...season, tiers: newTiers };
      }
      return season;
    });
  
    setSeasonsTst(newSeasonsTst);
  };
  
  const handleLimitChange = (seasonId, tierIndex, type, value) => {
    const newSeasonsTst = [...seasonsTst];
    const seasonIndex = newSeasonsTst.findIndex((season) => season.id === seasonId);
  
    if (seasonIndex !== -1) {
      const newTiers = [...newSeasonsTst[seasonIndex].tiers];
      newTiers[tierIndex][type] = parseInt(value);
      newSeasonsTst[seasonIndex].tiers = newTiers;
      setSeasonsTst(newSeasonsTst);
    }
  };
  
  const handleRemoveField = (seasonId, tierIndex) => {
    const newSeasonsTst = [...seasonsTst];
    const seasonIndex = newSeasonsTst.findIndex((season) => season.id === seasonId);
  
    if (seasonIndex !== -1) {
      const newTiers = [...newSeasonsTst[seasonIndex].tiers];
      newTiers.splice(tierIndex, 1);
      newSeasonsTst[seasonIndex].tiers = newTiers;
      setSeasonsTst(newSeasonsTst);
    }
  };
  
  const handleAddField = (seasonId) => {
    const seasonIndex = seasonsTst.findIndex((season) => season.id === seasonId);
  
    if (seasonIndex !== -1) {
      const seasonTiers = [...seasonsTst[seasonIndex].tiers];
      const lastTier = seasonTiers[seasonTiers.length - 1];
  
      if (lastTier.to + 2 <= parseInt(maxIntegrantes)) {
        const newTier = {
          from: lastTier.to + 1,
          to: Math.min(lastTier.to + 2, parseInt(maxIntegrantes)),
          price: '',
        };
  
        const newSeasonsTst = [...seasonsTst];
        newSeasonsTst[seasonIndex].tiers = [...seasonTiers, newTier];
        setSeasonsTst(newSeasonsTst);
      }
    }
  };
  
  
  const handleGenerateFields = () => {
    const from = parseInt(minIntegrantes);
    const to = parseInt(maxIntegrantes);
  
    if (from > to) {
      return; // Lida com entrada inválida
    }
  
    const newSeasonsTst = seasonsTst.map((season) => {
      const newTiers = [];
  
      for (let i = from; i <= to; i += 2) {
        const tier = {
          from: i,
          to: Math.min(i + 1, to),
          price: '',
        };
   
        newTiers.push(tier);
      }
  
      return {
        ...season,
        tiers: newTiers,
      };
    });
  
    setSeasonsTst(newSeasonsTst);
    setGeneratedArray([]);
  };
  

  const handleGenerateArray = () => {
    const newArray = seasonsTst.map((season) => ({
      seasonTitle: season.seasonTitle,
      startMonth: season.startMonth,
      endMonth: season.endMonth,
      tiers: season.tiers.map((tier) => ({
        from: tier.from,
        to: tier.to,
        price: tier.price,
      })),
    }));
    setGeneratedArray(newArray);
    console.log(generatedArray);
  };

  const handleAddRoom = () => {
    // Gere um ID único para o novo quarto
    const newRoomId = uuidv4();
    
    // Crie um novo objeto de quarto com o ID gerado e os dados do quarto
    const newRoom = { ...roomData, id: newRoomId, image: roomImage, pricePerSeason: null,  pricePerPerson: null};

    console.log(newRoom.titulo, newRoom.id, newRoom.image);
  
    // Adicione o novo quarto à lista de quartos
    setRooms((prevRooms) => [...prevRooms, newRoom]);
  
    // Limpe os dados do quarto para redefinir o formulário
    setRoomData(initialRoom);
  };

  const handleOptionChange = (event, newValue) => {
    setSelectedOption(newValue); // Atualize o estado com a opção selecionada
  };

  const handleStartDateChange = (date) => {
    setStartDate(date);
  };

  const handleEndDateChange = (date) => {
    setEndDate(date);
  };

  const handleTitleChange = (event) => {
    setSeasonTitle(event.target.value);
  };

  const handlePricePerHourChange = (event) => {
    setPricePerHour(event.target.value);
  };

  const handlePricePerDayChange = (event) => {
    setPricePerDay(event.target.value);
  };

  const handleOpenModalSeason = (index) => {
    setRoomIndex(index);
    setOpenModal(true);
  };

  const handleCloseModalSeason = () => {
    setRoomIndex(null);
    setOpenModal(false);
  };

  const handleAddSeason = () => {
    if (startDate && endDate && seasonTitle) {
      const newSeason = {
        startDate,
        endDate,
        seasonTitle,
      };
      setSeasons([...seasons, newSeason]);
      // Limpar os campos após adicionar o season
      setStartDate(null);
      setEndDate(null);
      setSeasonTitle('');

    }
  };
 
  const handleAddTemporada = () => {
    const temporada = {
      nome: temporadaNome,
      precoPorHora: temporadaPrecoHora,
      precoPorDia: temporadaPrecoDia,
    };
    setRooms((prevRooms) =>
      prevRooms.map((room, index) =>
        index === roomIndex
          ? {
              ...room,
              temporadas: [...room.temporadas, temporada],
            }
          : room
      )
    );
    setTemporadaNome('');
    setTemporadaPrecoHora('');
    setTemporadaPrecoDia('');
    handleCloseModal();
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setRoomData({
      ...roomData,
      [name]: value,
    });
  };

  const handleRoomImageChange = (event) => {
    const file = event.target.files[0];

    if (file) {
      const reader = new FileReader();

      reader.onloadend = () => {
        setRoomImage(reader.result);
      };

      reader.readAsDataURL(file);
    }
  };


  const handleRemoveRoom = (index) => {
    const updatedRooms = [...rooms];
    updatedRooms.splice(index, 1);
    setRooms(updatedRooms);
  };

  const generateTiers = () => {
    const tiers = [];
    for (let i = 1; i <= maxParticipants; i += 2) {
      if (i + 1 <= maxParticipants) {
        tiers.push(`${i}-${i + 1}`);
      } else {
        tiers.push(`${i}-${i}`);
      }
    }
    return tiers;
  };

  // Função para gerar os tiers com base nos tiers existentes na categoria
const generateTiersForCategory = (category) => {
  const categoryPrices = prices[category];
  const tiers = Object.keys(categoryPrices);
  return tiers;
};



  // Inicializa os preços para uma determinada categoria
  const initializePricesForCategory = (category) => {
    const tiers = generateTiers();
    const initialPrices = {};
    tiers.forEach((tier) => {
      initialPrices[tier] = 0;
    });

    setPrices((prevPrices) => ({
      ...prevPrices,
      [category]: { ...initialPrices },
    }));
  };

  // Atualiza os preços para um determinado tier de uma categoria
  const handleChangePrice = (category, tier, value) => {
    setPrices((prevPrices) => ({
      ...prevPrices,
      [category]: {
        ...prevPrices[category],
        [tier]: parseFloat(value),
      },
    }));
  };

  const handleTierChange = (category, tier, value, field) => {
    // Copiamos o objeto prices para fazer as modificações
    const newPrices = { ...prices };
    
    // Obtemos o valor do início e término do tier
    const [start, end] = tier.split('-').map(Number);
    
    // Atualizamos o início ou término do tier de acordo com o campo modificado
    if (field === 'start') {
      newPrices[category][`${value}-${end}`] = newPrices[category][tier];
      delete newPrices[category][tier];
    } else if (field === 'end') {
      newPrices[category][`${start}-${value}`] = newPrices[category][tier];
      delete newPrices[category][tier];
    }
    
    // Atualizamos o estado com o novo objeto de preços
    setPrices(newPrices);
  };

  // Remove um tier específico de uma categoria
  const handleRemoveTier = (category, tier) => {
    setPrices((prevPrices) => {
      const updatedPrices = { ...prevPrices };
      delete updatedPrices[category][tier];
      return updatedPrices;
    });
  };

// Adiciona um novo tier à categoria
const handleAddTier = (category) => {
  setPrices((prevPrices) => {
    const updatedPrices = { ...prevPrices };
    const tiers = generateTiersForCategory(category);

    let nextTierStart = 1;
    let nextTierEnd = 2;

    // Verifica se já existem tiers para essa categoria
    if (tiers.length > 0) {
      const lastTier = tiers[tiers.length - 1];
      const lastTierEnd = parseInt(lastTier.split('-')[1], 10);

      if (lastTierEnd < maxParticipants) {
        nextTierStart = lastTierEnd + 1;
        nextTierEnd = Math.min(nextTierStart + 1, maxParticipants);
      } else {
        return updatedPrices;
      }
    }

    const nextTier = `${nextTierStart}-${nextTierEnd}`;
    updatedPrices[category] = {
      ...updatedPrices[category],
      [nextTier]: 0,
    };

    return updatedPrices;
  });
};
  const calculateTotalPrice = () => {
    // Implemente aqui a lógica para calcular o preço total com base nos tiers e preços inseridos.
    // Para este exemplo, vamos apenas exibir os preços de todas as categorias e tiers no console.
    console.log(prices);
  };


  

  const handleDrop = (event) => {
    event.preventDefault();
    const imageUrl = event.dataTransfer.getData('text/plain');
    addImage(imageUrl);
  };

  const handleEdit = (rateId) => {
    // Handle the edit action here
    console.log(`Editing rate with ID: ${rateId}`);
  };

  const handleRemove = (rateId) => {
    // Handle the remove action here
    console.log(`Removing rate with ID: ${rateId}`);
  };


  const handleRemoveImage = (index) => {
    const updatedImages = [...draggedImages];
    updatedImages.splice(index, 1);
    setDraggedImages(updatedImages);
  };

  const addImage = (imageUrl) => {
    setDraggedImages([...draggedImages, imageUrl]);
  };

  const handleOpenModal = () => {
    setOpen(true);
  };

  const handleCloseModal = () => {
    setOpen(false);
  };

  const categoriesIncluded = ["Category 1", "Category 2", "Category 3"];
  const themes = ["Theme 1", "Theme 2", "Theme 3"];
  const inclusionsExclusions = ["Example 1", "Example 2", "Example 3"];

const handleNext = () => {
  setActiveStep((prevActiveStep) => prevActiveStep + 1);
  handleDebug();
};

const handleBack = () => {
  setActiveStep((prevActiveStep) => prevActiveStep - 1);
};

  
    return (
      <Box m="20px" textAlign="center">
      {/* HEADER */}
      {/* HEADER */}
<Box display="flex" justifyContent="space-between" alignItems="center">
<Header title="ACCOMMODATION 🛏️" subtitle="Create a product with Accommodation features"/>
</Box>
      <Box display="flex" justifyContent="space-between" alignItems="center"></Box>

      <div className="container" style={{ width: '800px', marginLeft:"650px" }}>
      <div>
      <Stepper activeStep={activeStep} alternativeLabel>
        {steps.map((step) => (
          <Step key={step.label}>
            <StepLabel>{step.label}</StepLabel>
          </Step>
        ))}
      </Stepper>

      <div>
        {activeStep === steps.length ? (
          <div>

     </div>
        ) : (
          <div>
            {/* Renderizar o conteúdo do formulário com base no passo atual */}
            {activeStep === 0 && (

            <div>
                <br/>
                <h2 className="text-center">Give your Accomodation a short but descriptive name & a code</h2>
                <h4 className="text-center" style={{ color: 'gray' }}>Give your Experience a short but descriptive name alongside a code</h4>
                <br/>
                <Box
  sx={{
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center', // Adiciona alinhamento horizontal ao centro
    '& > :not(style)': { m: 1 },
    marginRight: '18px',
  }}
>
  <TextField label="Code" id="outlined-size-normal" defaultValue="" onChange={handleCodeChange} />
  <TextField label="Title" id="outlined-size-normal" defaultValue="" onChange={handleProductTitleChange} />
</Box>
                <br/>
                <h2 className="text-center">What's the the Accomodation type ?</h2>
                <h4 className="text-center" style={{ color: 'gray' }}>Inform your travellers the facilities the going to be in.</h4>
                <br/>
                <Box
  sx={{
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center', // Adiciona alinhamento horizontal ao centro
    '& > :not(style)': { m: 1 },
    marginRight: '18px',
  }}
>
                
 <Autocomplete
        id="combo-box-demo"
        options={top100Films}
        getOptionLabel={(option) => option.label} // Substitua com sua função de rótulo
        sx={{ width: 300, marginLeft: 30 }}
        renderInput={(params) => <TextField {...params} label="Accomodation Type " />}
        value={selectedOption} // Defina o valor selecionado
        onChange={handleOptionChange} // Manipulador de evento para atualizar o estado
      />
     
     </Box>
     <br/>
                <h2 className="text-center">What is the Location of your Accomodation</h2>
                <h4 className="text-center" style={{ color: 'gray' }}>Inform travellers about the city or town where your expirience takes place. This will help with filtering and searching online.</h4>
                <br/>
                
                
                <MapContainer
      center={center}
      zoom={10}
      style={{ width: '30vw', height: '30vh', marginLeft:'20px', borderRadius: '10px', }}
    >
      <TileLayer
        url="https://api.maptiler.com/maps/basic/256/{z}/{x}/{y}.png?key=gWxmhZ3tn1T2ihkx2CMD"
        attribution='<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>'
      />
      {
        statesData.features.map((state) => {
          const coordinates = state.geometry.coordinates[0].map((item) => [item[1], item[0]]);

          return (<Polygon
            pathOptions={{
              fillColor: '#FD8D3C',
              fillOpacity: 0.7,
              weight: 2,
              opacity: 1,
              dashArray: 3,
              color: 'white'
            }}
            positions={coordinates}
            eventHandlers={{
              mouseover: (e) => {
                const layer = e.target;
                layer.setStyle({
                  dashArray: "",
                  fillColor: "#BD0026",
                  fillOpacity: 0.7,
                  weight: 2,
                  opacity: 1,
                  color: "white",
                })
              },
              mouseout: (e) => {
                const layer = e.target;
                layer.setStyle({
                  fillOpacity: 0.7,
                  weight: 2,
                  dashArray: "3",
                  color: 'white',
                  fillColor: '#FD8D3C'
                });
              },
              click: (e) => {

              }
            }}
          />)
        })
      }
    </MapContainer>
    <br/>

                <br/>
                <h2 className="text-center">Chose the Themes  Categories that best describe your Accomodation</h2>
                <h4 className="text-center" style={{ color: 'gray' }}>Help your travallers find what they are looking for. Are you offering a walking tour?</h4>
                <br/>


                <Box>
      <Button variant="contained" onClick={handleOpenModal}>
        Add Themes / Categories <AddIcon/>
      </Button>
      <Modal open={open} onClose={handleCloseModal}>
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            p: 2,
            marginTop:"300px",
            marginLeft:"100px"
          }}
        >
          <Box
            sx={{
              bgcolor: "background.paper",
              borderRadius: 8,
              p: 2,
            }}
          >
            <ModalContent categories={categoriesIncluded} themes={themes} />
          </Box>
        </Box>
      </Modal>
    </Box>
    <br/>
    <br/>
              


            </div>
            )}
            {activeStep === 1 &&     
            
            <div>
            <br/>
            <h2 className="text-center">Tell your travellers what the Accomodation is all about</h2>
            <h4 className="text-center" style={{ color: 'gray' }}>Describe your expirience in detail, using exciting and engaging language to capture the essence of the expirience.</h4>
            <br/>

            <TextField label="Short Description" id="outlined-size-normal" fullWidth defaultValue="Normal" />
            <br/>
            <br/>
            <TextField fullWidth
          id="outlined-multiline-static"
          label="Description"
          multiline
          rows={4}
          defaultValue="Default Value"
          width="300px"
        />
        
 <br/>
 <br/>

            
 <br/>
            <h2 className="text-center">Want to add Photos to your Accomodation?</h2>
            <h4 className="text-center" style={{ color: 'gray' }}>Show travellers even more details about your expirience to give your travellers a better idea of what to expect.</h4>
            <br/>
            <Container>
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <Paper
            sx={{
              backgroundColor: 'white',
              marginRight: '5px',
              border: '3px dashed gray',
              display: 'flex',
              flexWrap: 'wrap',
              justifyContent: 'center',
              alignItems: 'center',
              borderRadius: '10px',
              padding: '10px',
              minHeight: '370px',
              height: containerHeight,
              transition: 'height 0.3s ease',
            }}
            onDragOver={(event) => event.preventDefault()}
            onDrop={(event) => handleDrop(event)}
          >
            {draggedImages.length === 0 ? (
              <div className="empty-container-message">
                <h3 className="text-center">Drag photos here.</h3>
                <h5 className="text-center" style={{ color: 'gray' }}>
                  Supported file types are: .jpeg, .jpg, .png
                </h5>
               
                <Button variant="contained">🖼️ Search Locally</Button>
              </div>
            ) : (
              draggedImages.map((imageUrl, index) => (
                <div
                  key={index}
                  className="square-image"
                  style={{
                    position: 'relative',
                    width: '100px',
                    height: '100px',
                    margin: '5px',
                    borderRadius: '10px',
                    overflow: 'hidden',
                  }}
                >
                  <img
                    src={imageUrl}
                    alt={`Dragged Image ${index}`}
                    style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                  />
                  <Button
                    className="remove-button"
                    variant="dark"
                    size="small"
                    style={{
                      position: 'absolute',
                      top: '5px',
                      right: '5px',
                      width: '20px',
                      height: '20px',
                      padding: '0',
                      fontSize: '14px',
                    }}
                    onClick={() => handleRemoveImage(index)}
                  >
                    &times;
                  </Button>
                </div>
              ))
            )}
          </Paper>
        </Grid>
        <Grid item xs={5}>
      <Paper sx={{ backgroundColor: 'white', marginLeft: '5px', overflow: 'auto', maxHeight: '370px', width:"370px" }}>
        <Grid container spacing={2} className="d-flex flex-wrap">
          {imageUrls.map((imageUrl, index) => (
            <Grid item key={index} xs={4}>
              <div className="square-image">
                <img src={imageUrl} alt={`Image ${index}`} className="square-image" />
              </div>
            </Grid>
          ))}
        </Grid>
      </Paper>
    </Grid>
      </Grid>
    </Container>
    <br/>
            <h2 className="text-center">Want to add videos to your Accomodation?</h2>
            <h4 className="text-center" style={{ color: 'gray' }}>Show travellers even more details in videos about your expirience to give your travellers a better idea of what to expect.</h4>
            <br/>
            <TextField  id="outlined-size-normal" fullWidth defaultValue="link." />
            <TextField  id="outlined-size-normal" fullWidth defaultValue="link." />

            <br/>
            <br/>
    </div>
    
    }
            {activeStep === 2 && (

                
            <div>
            <br/>
            <h2 className="text-center">What is Include in your Accomodation ?</h2>
            <h4 className="text-center" style={{ color: 'gray' }}>Let travellers know what is  provided to help them understand what they are paying for. Included items such as food and drinks, special equipmentm and adnission fees.</h4>
            <br/>
            <Box>
  <Button variant="contained" onClick={handleOpenModal}>
    Select Inclusions <AddIcon/>
  </Button>
  <Modal open={open} onClose={handleCloseModal}>
    <Box
      sx={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        p: 2,
        width: "30%",
        height: "30%",
        margin: "auto",
        marginTop:"300px",
        marginLeft:"950px"
      }}
    >
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          bgcolor: "background.paper",
          borderRadius: 8,
          p: 2,
          width: "50%",
          height: "60%",
          overflow: "auto",
        }}
      >
        <SelectableItems items={inclusionsExclusions} />
        <br/>
        <Button variant="contained">
          Add  Inclusions <AddIcon/>
        </Button>
      </Box>
    </Box>
  </Modal>
</Box>
<br/>
<TextField fullWidth
          id="outlined-multiline-static"
          label="Things to Bring"
          multiline
          rows={4}
          defaultValue="Default Value"
          width="300px"
        />
        
           
            <br/>
            <h2 className="text-center">What is NOT Include in your Accomodation ?</h2>
            <h4 className="text-center" style={{ color: 'gray' }}>Is there anything your travellers may need that is not included in your offering? Example: Food, Equipment or Addiotinal fees.</h4>
            <br/>


            <Box>
  <Button variant="contained" onClick={handleOpenModal}>
    Select Exclusions <AddIcon/>
  </Button>
  <Modal open={open} onClose={handleCloseModal}>
    <Box
      sx={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        p: 2,
        width: "30%",
        height: "30%",
        margin: "auto",
        marginTop:"300px",
        marginLeft:"950px"
      }}
    >
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          bgcolor: "background.paper",
          borderRadius: 8,
          p: 2,
          width: "50%",
          height: "60%",
          overflow: "auto",
        }}
      >
        <SelectableItems items={inclusionsExclusions} />
        <br/>
        <Button variant="contained">
          Add  Exclusions <AddIcon/>
        </Button>
      </Box>
    </Box>
  </Modal>
</Box>
<br/>
<TextField fullWidth
          id="outlined-multiline-static"
          label="Things to Bring"
          multiline
          rows={4}
          defaultValue="Default Value"
          width="300px"
        />
        
        
 <br/>
           
          
<br/>
          
<br/>
        </div>

            )}
{activeStep === 3 &&    <div>



  
  
<div>
<br/>
          <h2 className="text-center">Set up the Seasons for the pricing  of your Accomodation?</h2>
          <h4 className="text-center" style={{ color: 'gray' }}>Rates allow you to price your options separatly. For example, settig additional price for lunch or pick - up.</h4>
          <br/>
    <TableContainer style={{height:"300px", overflowY:"auto"}} component={Paper}>
      <Table>
        <TableHead>
          <TableRow>
          <TableCell>Title</TableCell>
            <TableCell>Season Start Date</TableCell>
            <TableCell>Season End Date</TableCell>
            
            
            
          </TableRow>
        </TableHead>
        <TableBody>
          {seasons.map((season, index) => (
            <TableRow key={index}>
              <TableCell>{season.seasonTitle}</TableCell>
              <TableCell>{season.startDate}</TableCell>
              <TableCell>{season.endDate}</TableCell>
              
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
    <br/>
    <br/>
    <Grid sx={{marginBottom:'10px'}} container spacing={2}>
    <Grid item xs={6}>
  
</Grid>
    <TextField
          id="season-title"
          label="Título do Season"
          value={seasonTitle}
          onChange={handleTitleChange}
          fullWidth
          sx={{marginBottom:'10px'}}
        />
      <Grid item xs={6}>
  <TextField
    id="start-date"
    label="Data de início"
    type="date"
    InputLabelProps={{
      shrink: true,
    }}
    value={startDate}
    onChange={(e) => handleStartDateChange(e.target.value)}
    fullWidth
  />
</Grid>
<Grid item xs={6}>
  <TextField
    id="end-date"
    label="Data de término"
    type="date"
    InputLabelProps={{
      shrink: true,
    }}
    value={endDate}
    onChange={(e) => handleEndDateChange(e.target.value)}
    fullWidth
  />
</Grid>
    </Grid>
 
        
  
        <Button fullWidth variant="contained" color="primary" onClick={handleAddSeason}>
          Adicionar Season
        </Button>
        <br/>
        <br/>
        <br/>
    
  </div>




      </div>


}
{activeStep === 4 &&  <div>



<Box>
<Modal open={open} onClose={handleCloseModal}>
<Box
  sx={{
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    p: 2,
    width: "90%",
    height: "120%",
    margin: "auto",
    marginTop: "-150px",
    marginLeft: "300px"
  }}
>
  
  <div>
  

    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        bgcolor: "background.paper",
        borderRadius: 8,
        p: 2,
        width: "100%",
        height: "80%",
        overflow: "auto",
      }}
    >
      {selectedTab === "tab1" && (
        // Conteúdo para o Botão 1
        <div>
            <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            bgcolor: "background.paper",
            borderRadius: 8,
            p: 2,
            width: "100%",
            height: "100%",
            overflowY: "auto",
          }}
        >  

<Box
      sx={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        p: 2,
      }}
    >
      <Button
      color="secondary"
        variant={selectedTab === "tab1" ? "contained" : "outlined"}
        onClick={() => setSelectedTab("tab1")}
      >
        Price per Night / Hour
      </Button>
      <Button
      color="secondary"
        variant={selectedTab === "tab2" ? "contained" : "outlined"}
        onClick={() => setSelectedTab("tab2")}
      >
        Price per Person
      </Button>
    </Box>


            <h1 className="text-center" >Price 💲| Price per Night & Hour </h1>
            <Divider variant="middle" />
            <div>
              <h2>Select a room :</h2>
              <Select fullWidth value={rooms.indexOf(selectedRoom)} onChange={handleChangeRoomSelected}>
                {rooms.map((room, index) => (
                  <MenuItem key={index} value={index}>
                    {room.titulo}
                  </MenuItem>
                ))}
              </Select>
              
            </div>
            <h2 className="text-center">Seasons Available</h2>
            <Box
            gap="10px"
            width="100%"
            sx={{
              overflowY: 'auto',
             
            }}
            height='500px'
          >
      {seasonsTst.map((season, index) => (
<Card sx={{ marginBottom: '10px', border: 'black' }} key={index}>
  <CardContent>
    <Typography variant="h5" component="div">
      {season.seasonTitle}
    </Typography>
    <br />
    <Typography variant="body2" color="text.secondary">
      per Hour:
      <TextField
        fullWidth
        type="number"
        value={season.pricePerHour}
        onChange={(e) => handleSeasonsPriceChange(e, index, 'pricePerHour')}
      />
      per Night
      <TextField
        fullWidth
        type="number"
        value={season.pricePerDay}
        onChange={(e) => handleSeasonsPriceChange(e, index, 'pricePerDay')}
        sx={{ marginTop: '10px' }}
      />
    </Typography>
    <Button sx={{ marginTop: '10px' }} fullWidth variant="contained" color="primary">
      <CheckIcon />
    </Button>
  </CardContent>
</Card>
))}

    </Box>
    

     
          <br/>
          <button onClick={() => addSeasonsToRoomById(selectedRoom.id)}>Adicionar Seasons</button>
            <Button variant="contained" >
                Confirm <CheckIcon sx={{marginLeft:'4px'}}/>
     </Button>
     <Button variant="contained" onClick={handleDebugSeason}>
                Debug <CheckIcon sx={{marginLeft:'4px'}}/>
     </Button>
          </Box>
        </div>
      )}
      {selectedTab === "tab2" && (
        // Conteúdo para o Botão 2
        
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            bgcolor: "background.paper",
            borderRadius: 8,
            p: 2,
            width: "100%",
            height: "100%",
            overflowY: "auto",
          }}
        >  
          <Box
      sx={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        p: 2,
      }}
    >
      <Button
      color="secondary"
        variant={selectedTab === "tab1" ? "contained" : "outlined"}
        onClick={() => setSelectedTab("tab1")}
      >
        Price per Night / Hour
      </Button>
      <Button
      color="secondary"
        variant={selectedTab === "tab2" ? "contained" : "outlined"}
        onClick={() => setSelectedTab("tab2")}
      >
        Price per Person
      </Button>
    </Box>
            <h1 className="text-center" >Price 💲| Price per Person </h1>
            <Divider variant="middle" />
           
                    <div>
              <h2>Select a room :</h2>
              <Select fullWidth value={rooms.indexOf(selectedRoom)} onChange={handleChangeRoomSelected}>
                {rooms.map((room, index) => (
                  <MenuItem key={index} value={index}>
                    {room.titulo}
                  </MenuItem>
                ))}
              </Select>

  </div>
  <br/>
            <br/>
            <Grid container spacing={2} sx={{marginRight:'-450px'}}>
            <Grid item xs={2}>
              <TextField
                label="Número Mínimo de Integrantes"
                type="number"
                value={minIntegrantes}
                onChange={(e) => setMinIntegrantes(e.target.value)}
                
              />
            </Grid>
            <Grid item xs={2}>
              <TextField
                label="Número Máximo de Integrantes"
                type="number"
                value={maxIntegrantes}
                onChange={(e) => setMaxIntegrantes(e.target.value)}
                
              />
            </Grid>
          </Grid>
    
          <br/>
          <Button variant="contained" onClick={handleGenerateFields}>
            Generate fields<FormatListBulletedIcon sx={{marginLeft:'5px'}}/>
          </Button>
          <Box
            gap="10px"
            width="96%"
            sx={{
              overflowY: 'auto',
             
            }}
            height='400px's
          >
               {seasonsTst.map((season, seasonIndex) => (
  <div key={seasonIndex}>
    <br />
    <Typography variant="h6" sx={{ marginLeft: 38 }}>{`${season.seasonTitle} || ${season.startDate} - ${season.endDate}`}</Typography>
    {season.tiers.map((tier, tierIndex) => (
<Paper key={tierIndex} elevation={3} style={{ margin: '10px', padding: '10px' }}>
  <Box display="flex" alignItems="center">
    <TextField
      label="Participantes Mínimos"
      type="number"
      value={tier.from}
      onChange={(e) => handleLimitChange(season.id, tierIndex, 'from', e.target.value)}
      style={{ marginRight: '10px' }}
    />
    <Typography variant="subtitle1">-</Typography>
    <TextField
      label="Participantes Máximos"
      type="number"
      value={tier.to}
      onChange={(e) => handleLimitChange(season.id, tierIndex, 'to', e.target.value)}
      style={{ margin: '0 10px' }}
    />
    <Typography variant="subtitle1">-</Typography>
    <TextField
      label="Preço"
      type="number"
      value={tier.price}
      onChange={(e) => handlePriceChange(season.id, tierIndex, e)}
      style={{ marginRight: '10px' }}
    />
    <IconButton
      aria-label="Remover"
      onClick={() => handleRemoveField(season.id, tierIndex)}
    >
      <DeleteIcon />
    </IconButton>
  </Box>
</Paper>
))}
    <br />
    <Button variant="contained" sx={{ marginLeft: '10px', width: '650px' }} onClick={() => handleAddField(season.id)}>
      <AddIcon />
    </Button>
  </div>
))}
          </Box>
     
          <br/>
            <Button variant="contained" onClick={handleGenerateArray}>
                Crm <CheckIcon sx={{marginLeft:'4px'}}/>
            </Button>
            <Button variant="contained" onClick={() => addPricePersonToRoomById(selectedRoom.id)}>
          go <CheckIcon sx={{marginLeft:'4px'}}/>
      </Button>
          </Box>
      )}
    </Box>
  </div>
    <br/>
    
      <Button variant="contained" onClick={handleGenerateArray}>
          Confirm <CheckIcon sx={{marginLeft:'4px'}}/>
      </Button>
   
    </Box>
</Modal>
</Box>





<div>
<br/>
          <h2 className="text-center">Add rooms and pricing to your Accomodation</h2>
          <h4 className="text-center" style={{ color: 'gray' }}>Show travellers even more details in videos about your expirience to give your travellers a better idea of what to expect.</h4>
          <br/>

<Box mt={2}>
      <Paper sx={{height:"300px", overflowY:"auto"}} elevation={3}>
        {rooms.length === 0 ? (
          <>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
          <Typography  variant="body1" align="center" color="textSecondary">
            No rooms added
          </Typography>
          </>
        ) : (
          <List>
            {rooms.map((room, index) => (
              <ListItem key={index}>
                <Avatar
                  alt={`Room Image ${index + 1}`}
                  src={room.image}
                  variant="square"
                  sx={{ width: 64, height: 64 }}
                />
                <ListItemText sx={{marginLeft:'10px'}}
                  primary={`${room.codigo} - ${room.titulo}`}
                  secondary={room.descricao}
                />
              
                <ListItemSecondaryAction sx={{marginRight:'20px'}}>
                  <IconButton
                    edge="end"
                    onClick={() => handleRemoveRoom(index)}
                  >
                    <Delete />
                  </IconButton>
                </ListItemSecondaryAction>
                <ListItemSecondaryAction sx={{marginRight:'70px'}}>
                  <IconButton
                    edge="end"
                    onClick={handleOpenModal}
                  >
                    <AttachMoneyIcon/>
                  </IconButton>
                </ListItemSecondaryAction>
                
              </ListItem>
            ))}
          </List>
        )}
      </Paper>
    </Box>
    <br/>
    <br/>

    <Container>
    <Grid container spacing={2}>
      <Grid item xs={6}>
        <Paper
          sx={{
            backgroundColor: 'white',
            marginRight: '5px',
            border: '3px dashed gray',
            display: 'flex',
            flexWrap: 'wrap',
            justifyContent: 'center',
            alignItems: 'center',
            borderRadius: '10px',
            padding: '10px',
            minHeight: '370px',
            height: containerHeight,
            transition: 'height 0.3s ease',
          }}
          onDragOver={(event) => event.preventDefault()}
          onDrop={(event) => handleDrop(event)}
        >
          {draggedImages.length === 0 ? (
            <div className="empty-container-message">
              <h3 className="text-center">Drag photos here.</h3>
              <h5 className="text-center" style={{ color: 'gray' }}>
                Supported file types are: .jpeg, .jpg, .png
              </h5>
             
              <input type="file" accept="image/*" onChange={handleRoomImageChange} />
            </div>
          ) : (
            draggedImages.map((imageUrl, index) => (
              <div
                key={index}
                className="square-image"
                style={{
                  position: 'relative',
                  width: '100px',
                  height: '100p',
                  margin: '5px',
                  borderRadius: '10px',
                  overflow: 'hidden',
                }}
              >
                <img
                  src={imageUrl}
                  alt={`Dragged Image ${index}`}
                  style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                />
                <Button
                  className="remove-button"
                  variant="dark"
                  size="small"
                  style={{
                    position: 'absolute',
                    top: '5px',
                    right: '5px',
                    width: '20px',
                    height: '20px',
                    padding: '0',
                    fontSize: '14px',
                  }}
                  onClick={() => handleRemoveImage(index)}
                >
                  &times;
                </Button>
              </div>
            ))
          )}
        </Paper>
      </Grid>
      <Grid item xs={5}>
      <Box sx={{marginLeft:"10px", width:"400px"}}>
   
   <TextField
           label="Room's Code"
           name="codigo"
           value={roomData.codigo}
           onChange={handleInputChange}
           fullWidth
           sx={{marginBottom:"10px"}}
         />
   
         <TextField
           label="Títle"
           name="titulo"
           value={roomData.titulo}
           onChange={handleInputChange}
           fullWidth
           sx={{marginBottom:"10px"}}
         />   
     <TextField
       label="Room's Description"
       name="descricao"
       value={roomData.descricao}
       onChange={handleInputChange}
       fullWidth
       multiline
       rows={4}
       sx={{marginBottom:"10px"}}
     />
     <TextField
       label="Typology"
       name="tipo"
       value={roomData.tipo}
       onChange={handleInputChange}
       fullWidth
       sx={{marginBottom:"10px"}}
     />

<h3>Room's Inclusions</h3>
<Box
            gap="10px"
            width="100%"
            sx={{
              overflowY: 'auto',
             
            }}
            height='200px'
          >
   
    <Accordion>
      <AccordionSummary>
        
      </AccordionSummary>
      <AccordionDetails>
        <div>
          {items.map((item) => (
            <div key={item}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={isChecked[item] || false}
                    onChange={() => toggleItem(item)}
                  />
                }
                label={item}
              />
            </div>
          ))}
        </div>
      </AccordionDetails>
    </Accordion>

   
  </Box>
 
   </Box>
      </Grid>
    </Grid>
  </Container>

  <Dialog open={openModal} onClose={handleCloseModal}>
      <DialogTitle>Adicionar Temporada</DialogTitle>
      <DialogContent>
        <TextField
          label="Nome da Temporada"
          name="temporadaNome"
          value={temporadaNome}
          onChange={(e) => setTemporadaNome(e.target.value)}
        />
        <TextField
          label="Preço por Hora"
          name="temporadaPrecoHora"
          value={temporadaPrecoHora}
          onChange={(e) => setTemporadaPrecoHora(e.target.value)}
        />
        <TextField
          label="Preço por Dia"
          name="temporadaPrecoDia"
          value={temporadaPrecoDia}
          onChange={(e) => setTemporadaPrecoDia(e.target.value)}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={handleAddTemporada}>Adicionar</Button>
        <Button onClick={handleCloseModal}>Cancelar</Button>
      </DialogActions>
    </Dialog>

    <br/>
      <br/>
      {/* Aqui você pode adicionar campos adicionais para inclusões e imagem */}
      <Button fullWidth onClick={handleAddRoom} variant="contained" color="primary">
        Adicionar Quarto
      </Button>
  </div>

  <br/>
      <br/>
      <br/>
      <br/>



</div>

}

{activeStep === 5 &&    <div>
  <div>
    <br/>
               <Typography variant="h3" color={colors.grey[100]}>
                  <img src={success} alt="Icon-Success" style={{width:'170px', height:'auto', marginTop:"100px"}}/>
                </Typography>
          </div>
          <br/>
          <br/>
          <br/>
          <br/>
        </div>


}
            {/* Botões de navegação */}
            <div>
              <Button disabled={activeStep === 0} onClick={handleBack}>
                Voltar
              </Button>
              <Button variant="contained" color="primary" onClick={handleNext}>
                {activeStep === steps.length - 1 ? 'Enviar' : 'Próximo'}
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
      </div>
    </Box>
  );
};

export default Dashboard;

